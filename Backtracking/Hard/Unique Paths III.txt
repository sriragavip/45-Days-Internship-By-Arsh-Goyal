class Solution:
    def uniquePathsIII(self, grid: List[List[int]]) -> int:
        """ O(3^N)T O(N)S N-num of cells"""

        def fn(y, x):
            if val := grid.pop((y, x), False):
                val == 3 and not grid.values() and res.append(1)
                fn(y + 1, x), fn(y - 1, x), fn(y, x + 1), fn(y, x - 1)
                grid.update({(y, x): val})  # put val back, because it can be 1 and 3

        grid, res = {(y, x): val + 1 for y, row in enumerate(grid) for x, val in enumerate(row) if val != -1}, []  # 2=start 3=end
        start = next((y, x) for (y, x), v in grid.items() if v == 2)
        return fn(*start) or len(res)